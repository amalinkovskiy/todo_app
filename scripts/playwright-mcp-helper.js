#!/usr/bin/env node

/**
 * Playwright MCP Test Generator
 * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class PlaywrightMCPHelper {
  constructor() {
    this.baseUrl = 'http://localhost:3001';
    this.testDir = path.join(__dirname, '..', 'tests', 'ui');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   */
  async startMCPServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Playwright MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
      execSync('npx @playwright/mcp', { 
        stdio: 'inherit',
        cwd: process.cwd()
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   */
  createTestTemplate(testName) {
    const fileName = `${testName.toLowerCase().replace(/\s+/g, '-')}.spec.js`;
    const filePath = path.join(this.testDir, fileName);

    const template = `import { test, expect } from '@playwright/test';

test.describe('${testName} Tests', () => {
  
  test.beforeEach(async ({ page }) => {
    // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await page.request.delete('/api/test/clear');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.goto('/');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.waitForSelector('#addBtn');
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.waitForLoadState('networkidle');
  });

  test('should load the page', async ({ page }) => {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é MCP
    await expect(page).toHaveTitle(/TODO/);
  });

});
`;

    fs.writeFileSync(filePath, template);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç —Ñ–∞–π–ª: ${filePath}`);
    return filePath;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
   */
  analyzeExistingTests() {
    const testFiles = fs.readdirSync(this.testDir)
      .filter(file => file.endsWith('.spec.js'))
      .map(file => path.join(this.testDir, file));

    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:');
    
    testFiles.forEach(file => {
      const content = fs.readFileSync(file, 'utf8');
      const testCount = (content.match(/test\(/g) || []).length;
      const describeName = content.match(/test\.describe\('([^']+)'/)?.[1] || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      
      console.log(`  üìÑ ${path.basename(file)}: ${testCount} —Ç–µ—Å—Ç–æ–≤ (${describeName})`);
    });

    return testFiles;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
   */
  generateCoverageReport() {
    console.log('üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...');
    
    try {
      execSync('npx playwright test --reporter=html', { 
        stdio: 'inherit',
        cwd: process.cwd()
      });
      
      console.log('‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ playwright-report/index.html');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
   */
  async interactiveMode() {
    console.log(`
üé≠ Playwright MCP Helper
========================

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1. start-mcp    - –ó–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä
2. create-test  - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
3. analyze      - –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤  
4. coverage     - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
5. help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP:
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${this.baseUrl}
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MCP –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
`);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const helper = new PlaywrightMCPHelper();
  const command = process.argv[2];

  switch (command) {
    case 'start-mcp':
      helper.startMCPServer();
      break;
    case 'create-test':
      const testName = process.argv[3] || 'New Test';
      helper.createTestTemplate(testName);
      break;
    case 'analyze':
      helper.analyzeExistingTests();
      break;
    case 'coverage':
      helper.generateCoverageReport();
      break;
    case 'help':
    default:
      helper.interactiveMode();
      break;
  }
}

module.exports = PlaywrightMCPHelper;
